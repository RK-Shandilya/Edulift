generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  firstName        String
  lastName         String
  email            String      @unique
  password         String
  accountType      AccountType @default(Student)
  isActive         Boolean     @default(true)
  isApproved       Boolean     @default(true)
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  profile         Profile?
  coursesCreated  Course[]          @relation("InstructorCourses")
  enrolledCourses Course[]          @relation("EnrolledCourses")
  refreshTokens   RefreshToken[]
  ratings         RatingAndReview[]
  courseProgress  CourseProgress[]

  @@map("users")
}

model Profile {
  id            String  @id @default(uuid())
  gender        String?
  dateOfBirth   String?
  about         String?
  contactNumber Int?
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique

  @@map("profiles")
}

model Course {
  id                String       @id @default(uuid())
  courseName        String
  courseDescription String
  whatYouWillLearn  String?
  price             Int
  thumbnail         String?
  tag               String[]
  instructions      String[]
  status            CourseStatus @default(Draft)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relations
  instructor       User              @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId     String
  studentsEnrolled User[]            @relation("EnrolledCourses")
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       String?
  sections         Section[]
  ratings          RatingAndReview[]
  CourseProgress   CourseProgress[]

  @@map("courses")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  courses     Course[]

  @@map("categories")
}

model Section {
  id          String       @id @default(uuid())
  sectionName String
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    String
  subSections SubSection[]

  @@map("sections")
}

model SubSection {
  id               String          @id @default(uuid())
  title            String
  timeDuration     String
  description      String
  videoUrl         String
  section          Section         @relation(fields: [sectionId], references: [id])
  sectionId        String
  CourseProgress   CourseProgress? @relation(fields: [courseProgressId], references: [id])
  courseProgressId String?

  @@map("subsections")
}

model RatingAndReview {
  id       String @id @default(uuid())
  rating   Int
  review   String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  createdAt DateTime @default(now())

  @@map("ratings")
}

model CourseProgress {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  course          Course       @relation(fields: [courseId], references: [id])
  courseId        String
  completedVideos SubSection[]

  @@map("course_progress")
}

model OTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  createdAt DateTime @default(now())

  @@map("otps")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

enum CourseStatus {
  Draft
  Published
}

enum AccountType {
  Student
  Instructor
  Admin
}
